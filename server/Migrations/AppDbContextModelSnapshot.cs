// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoadGuard.Data;

#nullable disable

namespace RoadGuard.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoadGuard.Models.Entities.DriverRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_user_id");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_user_id");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_driver_ratings");

                    b.HasIndex("FromUserId")
                        .HasDatabaseName("ix_driver_ratings_from_user_id");

                    b.HasIndex("ToUserId")
                        .HasDatabaseName("ix_driver_ratings_to_user_id");

                    b.ToTable("driver_ratings", (string)null);
                });

            modelBuilder.Entity("RoadGuard.Models.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<double>("RadiusMeters")
                        .HasColumnType("double precision")
                        .HasColumnName("radius_meters");

                    b.HasKey("Id")
                        .HasName("pk_reports");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("RoadGuard.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CarColor")
                        .HasColumnType("text")
                        .HasColumnName("car_color");

                    b.Property<string>("CarMake")
                        .HasColumnType("text")
                        .HasColumnName("car_make");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<double>("ReputationScore")
                        .HasColumnType("double precision")
                        .HasColumnName("reputation_score");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoadGuard.Models.Entities.DriverRating", b =>
                {
                    b.HasOne("RoadGuard.Models.Entities.User", "FromUser")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_ratings_users_from_user_id");

                    b.HasOne("RoadGuard.Models.Entities.User", "ToUser")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_driver_ratings_users_to_user_id");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("RoadGuard.Models.Entities.User", b =>
                {
                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
